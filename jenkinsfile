pipeline {
    agent any
    environment {
        AWS_REGION = 'eu-west-1'  // AWS region
        ECR_REGISTRY = '250738637992.dkr.ecr.eu-west-1.amazonaws.com'  // ECR registry URL
        SSO_PROFILE = 'MSCCLOUD-250738637992'  // AWS SSO profile name
        GIT_REPO = 'https://github.com/dvaishnavi8631/multicloud.git'  // GitHub repository URL
        GIT_CREDENTIALS_ID = 'github'  // Jenkins credentials ID for GitHub PAT
        ECR_REPOSITORY = 'x23183209-multicloud'  // ECR repository name
        K8S_NAMESPACE = 'default'  // Kubernetes namespace
        DEPLOYMENT_NAME = 'simple-app-deployment'  // Kubernetes deployment name
    }
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo 'Checking out the Git repository...'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: "${GIT_REPO}",
                            credentialsId: "${GIT_CREDENTIALS_ID}"
                        ]]
                    ])
                }
            }
        }

        stage('Login to AWS via SSO') {
            steps {
                script {
                    echo 'Ensure AWS SSO login has been performed manually before running the pipeline.'
                    sh "aws sso login --profile ${SSO_PROFILE} --region ${AWS_REGION}"
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    echo 'Logging into AWS ECR...'
                    def loginPassword = sh(
                        script: "aws ecr get-login-password --region ${AWS_REGION} --profile ${SSO_PROFILE}",
                        returnStdout: true
                    ).trim()
                    sh "docker login -u AWS -p ${loginPassword} https://${ECR_REGISTRY}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh "docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest ."
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    echo 'Pushing Docker image to AWS ECR...'
                    sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                }
            }
        }

        stage('Configure kubectl for EKS') {
            steps {
                script {
                    echo 'Configuring kubectl to connect to EKS...'
                    sh """
                        aws eks update-kubeconfig \
                            --region ${AWS_REGION} \
                            --profile ${SSO_PROFILE} \
                            --name x23183209-multicloud  # Replace with your EKS cluster name
                    """
                }
            }
        }

        stage('Create or Update Deployment') {
            steps {
                script {
                    echo 'Applying Kubernetes deployment manifest...'
                    // Update the image in the deployment.yaml
                    sh """
                    
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo 'Verifying application deployment...'
                    sh "kubectl get pods --namespace=${K8S_NAMESPACE}"
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline executed successfully! Application deployed to EKS."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
