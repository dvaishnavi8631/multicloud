pipeline {
    agent any
    environment {
        // AWS Variables
        AWS_REGION = 'eu-west-1'
        ECR_REGISTRY = '250738637992.dkr.ecr.eu-west-1.amazonaws.com'
        SSO_PROFILE = 'MSCCLOUD-250738637992'
        ECR_REPOSITORY = 'x23183209-multicloud'
        K8S_NAMESPACE = 'default'
        DEPLOYMENT_NAME = 'simple-app-deployment'

        // GCP Variables
        GCP_PROJECT = 'elegant-hope-441319-t6'
        GKE_CLUSTER = 'gcp-multicloud'
        GKE_REGION = 'europe-west1'
        GKE_ZONE = 'europe-west1-b'
        GCLOUD_PATH = '/home/jenkins/google-cloud-sdk/bin'
        IMAGE_NAME_GCP = "europe-docker.pkg.dev/${GCP_PROJECT}/gcp-multicloud/multicloud-app"

        // Azure Variables
        AZURE_SUBSCRIPTION_ID = '2d101f2e-3531-4cd5-a463-6f697453bb43'
        AZURE_RESOURCE_GROUP = 'Multicloud'
        AKS_CLUSTER_NAME = 'multicloudAKS'
        ACR_REGISTRY = 'x23183209multicloud.azurecr.io'
        IMAGE_NAME_AZURE = "${ACR_REGISTRY}/multicloud-app"

        // Common Variables
        GIT_REPO = 'https://github.com/dvaishnavi8631/multicloud.git'
        GIT_CREDENTIALS_ID = 'github'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('Setup and Checkout Code') {
            steps {
                script {
                    echo 'Checking out the Git repository...'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: "${GIT_REPO}",
                            credentialsId: "${GIT_CREDENTIALS_ID}"
                        ]]
                    ])
                }
            }
        }

        stage('Login to AWS via SSO') {
            steps {
                script {
                    echo 'Authenticating with AWS SSO...'
                    sh "aws sso login --profile ${SSO_PROFILE} --region ${AWS_REGION}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh "docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Push Image to AWS ECR') {
            steps {
                script {
                    echo 'Logging into AWS ECR...'
                    def awsLoginPassword = sh(
                        script: "aws ecr get-login-password --region ${AWS_REGION} --profile ${SSO_PROFILE}",
                        returnStdout: true
                    ).trim()
                    sh "docker login -u AWS -p ${awsLoginPassword} ${ECR_REGISTRY}"
                    echo 'Pushing Docker image to AWS ECR...'
                    sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to AWS EKS') {
            steps {
                script {
                    echo 'Configuring kubectl for AWS EKS...'
                    sh """
                        aws eks update-kubeconfig \
                            --region ${AWS_REGION} \
                            --profile ${SSO_PROFILE} \
                            --name x23183209-multicloud
                    """
                    echo 'Creating ConfigMap for NGINX...'
                    sh """
                        kubectl create configmap simple-app-nginx-config --from-file=default.conf --namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    """
                    echo 'Deploying to AWS EKS...'
                    sh """
                        export REGISTRY_URL=${ECR_REGISTRY}
                        export IMAGE_NAME=${ECR_REPOSITORY}
                        export IMAGE_TAG=${IMAGE_TAG}
                        envsubst < deployment.yaml > temp-deployment.yaml
                        kubectl apply -f temp-deployment.yaml
                        kubectl apply -f service.yaml
                        kubectl apply -f hpa.yaml
                        kubectl apply -f pdb.yaml
                    """
                }
            }
        }

        stage('Push Image to GCP Artifact Registry') {
            steps {
                script {
                    echo 'Authenticating with Google Cloud...'
                    withCredentials([file(credentialsId: 'gcpacnt', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh """
                            export PATH=${GCLOUD_PATH}:$PATH
                            gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
                            gcloud config set project ${GCP_PROJECT}
                            gcloud auth configure-docker europe-docker.pkg.dev --quiet
                            docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${IMAGE_NAME_GCP}:${IMAGE_TAG}
                            docker push ${IMAGE_NAME_GCP}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy to GCP GKE') {
            steps {
                script {
                    echo 'Configuring kubectl for GKE...'
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${GCP_PROJECT}
                    """
                    echo 'Creating ConfigMap for NGINX...'
                    sh """
                        kubectl create configmap simple-app-nginx-config --from-file=default.conf --namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    """
                    echo 'Deploying to GKE...'
                    sh """
                        export REGISTRY_URL=europe-docker.pkg.dev/${GCP_PROJECT}/gcp-multicloud
                        export IMAGE_NAME=multicloud-app
                        export IMAGE_TAG=${IMAGE_TAG}
                        envsubst < deployment.yaml > temp-deployment.yaml
                        kubectl apply -f temp-deployment.yaml
                        kubectl apply -f service.yaml
                        kubectl apply -f hpa.yaml
                        kubectl apply -f pdb.yaml
                    """
                }
            }
        }

        stage('Push Image to Azure ACR') {
            steps {
                script {
                    echo 'Logging into Azure ACR...'
                    withCredentials([
                        string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                        string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                    ]) {
                        sh """
                            az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
                            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
                            az acr login --name ${ACR_REGISTRY}
                            docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${IMAGE_NAME_AZURE}:${IMAGE_TAG}
                            docker push ${IMAGE_NAME_AZURE}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy to Azure AKS') {
            steps {
                script {
                    echo 'Configuring kubectl for AKS...'
                    sh """
                        az aks get-credentials --resource-group ${AZURE_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME}
                    """
                    echo 'Creating ConfigMap for NGINX...'
                    sh """
                        kubectl create configmap simple-app-nginx-config --from-file=default.conf --namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                    """
                    echo 'Deploying to Azure AKS...'
                    sh """
                        export REGISTRY_URL=${ACR_REGISTRY}
                        export IMAGE_NAME=multicloud-app
                        export IMAGE_TAG=${IMAGE_TAG}
                        envsubst < deployment.yaml > temp-deployment.yaml
                        kubectl apply -f temp-deployment.yaml
                        kubectl apply -f service.yaml
                        kubectl apply -f hpa.yaml
                        kubectl apply -f pdb.yaml
                    """
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline executed successfully! Application deployed to AWS, GCP, and Azure."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
