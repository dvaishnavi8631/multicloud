pipeline {
    agent any
    environment {
        GCP_PROJECT = 'elegant-hope-441319-t6'  // Replace with your GCP project ID
        GKE_CLUSTER = 'gcp-multicloud'  // Replace with your GKE cluster name
        GKE_REGION = 'europe-west1'  // Replace with your GKE region
        IMAGE_NAME = 'europe-docker.pkg.dev/${GCP_PROJECT}/gcp-multicloud/multicloud-app'  // Artifact Registry image endpoint
        IMAGE_TAG = 'latest'  // Tag for the Docker image
        GCLOUD_PATH = '/home/jenkins/google-cloud-sdk/bin'  // Path to the Google Cloud SDK
    }
    stages {
        stage('Authenticate with Google Cloud') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcpacnt', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        echo "Service Account Key Path: ${GOOGLE_APPLICATION_CREDENTIALS}"
                        echo "GCP Project: ${GCP_PROJECT}"

                        // Authenticate to GCP and set the project
                        sh """
                            export PATH=${GCLOUD_PATH}:$PATH
                            gcloud auth activate-service-account --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
                            gcloud config set project ${GCP_PROJECT}
                            # Debug: Verify authentication and list GCP repositories
                            gcloud auth list
                            gcloud artifacts repositories list --location=europe
                        """
                    }
                }
            }
        }

        stage('Install GKE Auth Plugin') {
            steps {
                script {
                    echo "Installing GKE Auth Plugin for kubectl..."
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        gcloud components install gke-gcloud-auth-plugin
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image for your application..."
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Push Docker Image to Artifact Registry') {
            steps {
                script {
                    echo "Pushing Docker image to Google Cloud Artifact Registry..."
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        gcloud auth configure-docker europe-docker.pkg.dev
                    """
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    echo "Deploying application to GKE..."
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone europe-west1-b --project ${GCP_PROJECT}
                    """

                    // Clone the GitHub repository using stored credentials
                    withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        echo "Cloning GitHub repository to get YAML files..."
                        sh """
                            if [ -d multicloud ]; then
                                cd multicloud && git pull
                            else
                                git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/dvaishnavi8631/multicloud.git
                            fi
                        """
                    }

                    // Apply the deployment.yaml and service.yaml from the repository
                    sh """
                        export PATH=${GCLOUD_PATH}:$PATH
                        kubectl apply -f multicloud/deployment.yaml
                        kubectl apply -f multicloud/service.yaml
                    """
                }
            }
        }
    }
}
